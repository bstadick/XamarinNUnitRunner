<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutPageLineOne" xml:space="preserve">
    <value>This app is written in C# and native APIs using the Xamarin Platform. It runs unit tests using the NUnit Framework.</value>
    <comment>The first line on the About page.</comment>
  </data>
  <data name="AboutPageLineTwo" xml:space="preserve">
    <value>It shares code with its iOS, Android, and Windows versions.</value>
    <comment>The second line on the About page.</comment>
  </data>
  <data name="AboutPageLogoImagePath" xml:space="preserve">
    <value>XamarinNUnitRunner.Resources.nunit_xamarin_logo.png</value>
    <comment>Resource path for the About page logo.</comment>
  </data>
  <data name="AboutPageNUnitButton" xml:space="preserve">
    <value>Learn more about NUnit</value>
    <comment>The content of the NUnit button on the About page.</comment>
  </data>
  <data name="AboutPageProjectButton" xml:space="preserve">
    <value>Learn more about this project</value>
    <comment>The content of the Project button on the About page.</comment>
  </data>
  <data name="AboutPageTitle" xml:space="preserve">
    <value>About</value>
    <comment>Title used for the About page.</comment>
  </data>
  <data name="AboutPageXamarinButton" xml:space="preserve">
    <value>Learn more about Xamarin</value>
    <comment>The content of the Xamarin button on the About page.</comment>
  </data>
  <data name="ArgumentExceptionForRootFilterElementNullMessage" xml:space="preserve">
    <value>The parent element cannot be non-null if the element type is RootFilter.</value>
    <comment>Used by ArgumentException when a parent element is not null and not a root filter.</comment>
  </data>
  <data name="ArgumentExceptionLeafElementMessage" xml:space="preserve">
    <value>The leaf element's child is not null thus the provided leaf element is not the true leaf element. This may indicate an error in the construction or parsing of the filter.</value>
    <comment>Used by ArgumentException when the leaf element of NUnitFilter.Build child is not null.</comment>
  </data>
  <data name="ArgumentExceptionMessageForNullOrEmptyMessage" xml:space="preserve">
    <value>The {0} cannot be null or empty.</value>
    <comment>Used by ArgumentException when an object is null or empty, where format is replaced by the name of the parameter.</comment>
  </data>
  <data name="ArgumentNullExceptionMessage" xml:space="preserve">
    <value>The {0} cannot be null.</value>
    <comment>Used by ArgumentNullException when an object is null, where format is replaced by the name of the parameter.</comment>
  </data>
  <data name="ArgumentOutOfRangeExceptionElementTypeEnumMessage" xml:space="preserve">
    <value>The given element type is not supported.{0}</value>
    <comment>Used by ArgumentOutOfRangeException when the ElementType enum is out of range, where format is replaced by the element that was out of range.</comment>
  </data>
  <data name="ArgumentOutOfRangeExceptionForLessThanZeroMessage" xml:space="preserve">
    <value>The {0} must be greater than or equal to 0.</value>
    <comment>Used by ArgumentOutOfRangeException when a value is less than zero, where format is replaced by the name of the parameter.</comment>
  </data>
  <data name="AssemblyName" xml:space="preserve">
    <value>XamarinNUnitRunner</value>
    <comment>The name of the assembly.</comment>
  </data>
  <data name="InvalidOperationExceptionChildAlreadySetMessage" xml:space="preserve">
    <value>The child element has already been set for this instance.</value>
    <comment>Used by InvalidOperationException when the child of NUnitFilterContainerElement has already been set.</comment>
  </data>
  <data name="InvalidOperationExceptionFilterBuildChildMismatchMessage" xml:space="preserve">
    <value>The parent element's {0} child was not the same reference as the current node.</value>
    <comment>Used by InvalidOperationException when the NUnitFilter.Build traversal fails due to a parent element child mismatching the current element, where format is replaced by the parent element.</comment>
  </data>
  <data name="InvalidOperationExceptionFilterBuildChildNullMessage" xml:space="preserve">
    <value>The parent element's {0} child was null.</value>
    <comment>Used by InvalidOperationException when the NUnitFilter.Build traversal fails due to a parent element child being null, where format is replaced by the parent element.</comment>
  </data>
  <data name="InvalidOperationExceptionFilterBuildElementTypeEnumMessage" xml:space="preserve">
    <value>The root element type was not the expected type of RootFilter but was instead {0}.</value>
    <comment>Used by InvalidOperationException when the NUnitFilter.Build traversal fails due to element type not being the expected type, where format is replaced by the actual type.</comment>
  </data>
  <data name="InvalidOperationExceptionFilterBuildMessage" xml:space="preserve">
    <value>Forward traversal will not proceed properly. This may indicate an error in the construction or parsing of the filter.</value>
    <comment>Used by InvalidOperationException when the NUnitFilter.Build traversal fails.</comment>
  </data>
  <data name="MenuPageTitle" xml:space="preserve">
    <value>Menu</value>
    <comment>Title user for the Menu page.</comment>
  </data>
  <data name="RunTestsButton" xml:space="preserve">
    <value>Run Tests</value>
    <comment>The content of the Run Tests button or menu item.</comment>
  </data>
  <data name="TabFeedImagePath" xml:space="preserve">
    <value>XamarinNUnitRunner.Resources.tab_feed.png</value>
    <comment>Resource path for the tab feed image.</comment>
  </data>
  <data name="TestListenerFinished" xml:space="preserve">
    <value>Finished</value>
    <comment>Test listener finished message.</comment>
  </data>
  <data name="TestListenerMessage" xml:space="preserve">
    <value>Message</value>
    <comment>Test listener message.</comment>
  </data>
  <data name="TestListenerOutput" xml:space="preserve">
    <value>Output</value>
    <comment>Test listener output message.</comment>
  </data>
  <data name="TestListenerStarted" xml:space="preserve">
    <value>Started</value>
    <comment>Test listener started message.</comment>
  </data>
  <data name="TestResultNotExecuted" xml:space="preserve">
    <value>Test not executed.</value>
    <comment>Displayed when test was not executed.</comment>
  </data>
  <data name="TestsPageAssertionStatus" xml:space="preserve">
    <value>Assertion Status: </value>
    <comment>Label uses for the Test page assertion status.</comment>
  </data>
  <data name="TestsPageTestAssertionCount" xml:space="preserve">
    <value>Assert Count: </value>
    <comment>Label used for the Test page tests assert count.</comment>
  </data>
  <data name="TestsPageTestCount" xml:space="preserve">
    <value>Test Count: </value>
    <comment>Label used for the Test page test count.</comment>
  </data>
  <data name="TestsPageTestDuration" xml:space="preserve">
    <value>Duration: </value>
    <comment>Label used for the Test page tests duration.</comment>
  </data>
  <data name="TestsPageTestException" xml:space="preserve">
    <value>Exception Message:</value>
    <comment>Label used for the Test page exception message.</comment>
  </data>
  <data name="TestsPageTestFailCount" xml:space="preserve">
    <value>Failed: </value>
    <comment>Label used for the Test page tests failed count.</comment>
  </data>
  <data name="TestsPageTestId" xml:space="preserve">
    <value>Id: </value>
    <comment>Label used for the Test page test id.</comment>
  </data>
  <data name="TestsPageTestIgnoreCount" xml:space="preserve">
    <value>Ignored: </value>
    <comment>Label used for the Test page tests ignored count.</comment>
  </data>
  <data name="TestsPageTestInconclusiveCount" xml:space="preserve">
    <value>Inconclusive: </value>
    <comment>Label used for the Test page tests inconclusive count.</comment>
  </data>
  <data name="TestsPageTestOutput" xml:space="preserve">
    <value>Output Messages:</value>
    <comment>Label used for the Test page output messages.</comment>
  </data>
  <data name="TestsPageTestPassCount" xml:space="preserve">
    <value>Passed: </value>
    <comment>Label used for the Test page tests passed count.</comment>
  </data>
  <data name="TestsPageTestResult" xml:space="preserve">
    <value>Result: </value>
    <comment>Label used for the Test page tests results.</comment>
  </data>
  <data name="TestsPageTestStackTrace" xml:space="preserve">
    <value>StackTrace:</value>
    <comment>Label used for the Test page stack trace.</comment>
  </data>
  <data name="TestsPageTestWarningCount" xml:space="preserve">
    <value>Warning: </value>
    <comment>Label used for the Test page warning count.</comment>
  </data>
  <data name="TestsPageTitle" xml:space="preserve">
    <value>Tests</value>
    <comment>Title used for the Test page.</comment>
  </data>
  <data name="TestsPageUnitMillisecond" xml:space="preserve">
    <value>ms</value>
    <comment>Unit for milliseconds.</comment>
  </data>
  <data name="TestsPageUnitSecond" xml:space="preserve">
    <value>sec</value>
    <comment>Unit for seconds.</comment>
  </data>
</root>